package omnivoxel.util.config;

import omnivoxel.client.game.settings.ConstantGameSettings;

import java.io.*;
import java.nio.file.*;
import java.util.*;

public class ConfigFile {
    private final String configName;

    public ConfigFile(String configName) {
        this.configName = configName;
    }

    private Path getConfigPath() {
        return Path.of(configName);
    }

    public Map<String, Object> load() {
        Path path = getConfigPath();
        Map<String, Object> result = new HashMap<>();
        System.out.println(path);

        if (!Files.exists(path)) {
            return result;
        }

        try (InputStream in = Files.newInputStream(path)) {
            Properties props = new Properties();
            props.load(in);
            for (String key : props.stringPropertyNames()) {
                result.put(key, props.getProperty(key));
            }
        } catch (IOException e) {
            System.err.println("Failed to load config '" + configName + "': " + e.getMessage());
        }

        return result;
    }

    public void write(Map<String, ?> properties) throws IOException {
        Files.createDirectories(Path.of(ConstantGameSettings.CONFIG_LOCATION));
        Path path = getConfigPath();

        Properties props = new Properties();
        for (Map.Entry<String, ?> entry : properties.entrySet()) {
            props.setProperty(entry.getKey(), String.valueOf(entry.getValue()));
        }

        try (OutputStream out = Files.newOutputStream(path)) {
            props.store(out, "Generated by OmniVoxel");
        }
    }
}